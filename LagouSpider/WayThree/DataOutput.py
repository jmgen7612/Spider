#!/usr/bin/env python3# -*- coding: utf-8 -*-#@file   :DataOutput.py#@time   :2018/5/26 2:00#@Author :jmgen#@Version:1.0#@Desc   :import sqlite3import timeclass DataOutput(object):    def __init__(self):        self.name='jobs' + time.strftime('%Y%m%d%H%M%S', time.localtime())        self.cx = sqlite3.connect("%s.sqlite3"%self.name)        self.create_table(self.name)        self.pagedatas=[]    def create_table(self,table_name):        '''        创建数据表        :param table_name:表名称        :return:        '''        values = '''        positionId integer primary key,        positionName varchar(50) NOT NULL,        companyFullName varchar(50) NOT NULL,        companyId integer NOT NULL,        workYear varchar(20) NOT NULL,        salary varchar(10) NOT NULL,        education varchar(10) NOT NULL,        city varchar(10) NOT NULL,        district varchar(20) NOT NULL,        businessZones varchar(40) NOT NULL,        financeStage varchar(20) NOT NULL,        industryField varchar(20) NOT NULL,        companySize varchar(20) NOT NULL,        positionAdvantage varchar(20) NOT NULL,        companyLabelList varchar(20) NOT NULL,        firstType varchar(20) NOT NULL,        secondType varchar(20) NOT NULL,        createTime varchar(20) NOT NULL,        lastLogin varchar(20) NOT NULL,        resumeProcessRate integer NOT NULL,        resumeProcessDay integer NOT NULL,        joblabel varchar(20) NOT NULL,        jobdescription varchar(1000000) NOT NULL,        jobaddress varchar(40) NOT NULL,        pageurl varchar(60) NOT NULL        '''        self.cx.execute('CREATE TABLE IF NOT EXISTS  %s(%s)'%(table_name,values))    def store_datas(self, datas):        '''        数据存储        :param data:        :return:        '''        if datas is None:            return        self.output_db(self.name,datas)    def output_db(self, table_name,datas):        '''        将数据存储到sqlite        :return:        '''        for data in datas:            self.cx.execute("INSERT INTO %s (positionId, positionName, companyFullName, companyId, workYear,"                            "salary, education, city, district, businessZones,financeStage,"                            " industryField, companySize,positionAdvantage,companyLabelList,"                            " firstType,secondType,createTime, lastLogin, resumeProcessRate,"                            " resumeProcessDay,joblabel,jobdescription,jobaddress,pageurl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'Null','Null','Null','Null')"% table_name,data)            datas.remove(data)        self.cx.commit()    def update_data(self, pagedata):        '''        更新数据        :param data:        :return:        '''        if pagedata is None:            return        self.pagedatas.append(pagedata)        if len(self.pagedatas) > 15:            self.update_db(self.name,pagedata)    def update_db(self, table_name,pagedata):        self.cx.execute("UPDATE %s SET joblabel=?,jobdescription=?,jobaddress=?,pageurl=? WHERE positionId =? "% table_name,(pagedata[1],pagedata[2],pagedata[3],pagedata[4],pagedata[0]))        self.cx.commit()    def output_end(self,datas):        '''        关闭数据库        :return:        '''        if len(datas) > 0:            self.output_db(self.name,datas)        self.cx.close()